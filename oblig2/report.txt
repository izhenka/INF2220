Complexity of implementation:

1) Topological sorting:
O(E + V)
Here I use adjacency lists, so the program doesn't need to go through all vertices in each iteration in for-loop.

        while(!q.isEmpty()){
            Task t = q.remove();
            topSortedTasks.add(t);
            cnt++;
            for (Task adjacentT: t.outEdges) {
                if(--adjacentT.cntPredecessors == 0){
                    q.add(adjacentT);
                }
            }
        }


2) Acyclic graph:
O(E + V) - to find earliest time
+ O(E + V) - to find latest time

The same principle here.


* where E - number edges(dependencies), V - number of vertices(tasks)
** I have looked just at main methods
